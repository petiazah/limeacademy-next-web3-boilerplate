/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BookLibraryInterface extends utils.Interface {
  functions: {
    "BookDatabase(uint256)": FunctionFragment;
    "addBook(string,uint256)": FunctionFragment;
    "addBookCopies(uint256,uint256)": FunctionFragment;
    "bookCount()": FunctionFragment;
    "borrowBook(uint256)": FunctionFragment;
    "getAvailableBooks()": FunctionFragment;
    "getBookDetail(uint256)": FunctionFragment;
    "getOwnerHistoryOfBook(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnBook(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BookDatabase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBookCopies",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bookCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBookDetail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerHistoryOfBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BookDatabase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBookCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bookCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerHistoryOfBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BookLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BookLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BookDatabase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        name: string;
        availableCopies: BigNumber;
        ownerCount: BigNumber;
      }
    >;

    addBook(
      _name: string,
      _copies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBookCopies(
      _bookId: BigNumberish,
      _copies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bookCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableBooks(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getBookDetail(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string[]]>;

    getOwnerHistoryOfBook(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BookDatabase(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      name: string;
      availableCopies: BigNumber;
      ownerCount: BigNumber;
    }
  >;

  addBook(
    _name: string,
    _copies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBookCopies(
    _bookId: BigNumberish,
    _copies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bookCount(overrides?: CallOverrides): Promise<BigNumber>;

  borrowBook(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableBooks(overrides?: CallOverrides): Promise<BigNumber[]>;

  getBookDetail(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string[]]>;

  getOwnerHistoryOfBook(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnBook(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BookDatabase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        name: string;
        availableCopies: BigNumber;
        ownerCount: BigNumber;
      }
    >;

    addBook(
      _name: string,
      _copies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addBookCopies(
      _bookId: BigNumberish,
      _copies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bookCount(overrides?: CallOverrides): Promise<BigNumber>;

    borrowBook(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAvailableBooks(overrides?: CallOverrides): Promise<BigNumber[]>;

    getBookDetail(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string[]]>;

    getOwnerHistoryOfBook(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnBook(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BookDatabase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBook(
      _name: string,
      _copies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBookCopies(
      _bookId: BigNumberish,
      _copies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bookCount(overrides?: CallOverrides): Promise<BigNumber>;

    borrowBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableBooks(overrides?: CallOverrides): Promise<BigNumber>;

    getBookDetail(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerHistoryOfBook(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BookDatabase(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBook(
      _name: string,
      _copies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBookCopies(
      _bookId: BigNumberish,
      _copies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bookCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableBooks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBookDetail(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerHistoryOfBook(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnBook(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
