/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { USElection, USElectionInterface } from "../USElection";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "winner",
        type: "uint256",
      },
    ],
    name: "LogElectionEnded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "winner",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "stateSeats",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "string",
        name: "state",
        type: "string",
      },
    ],
    name: "LogStateResult",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "BIDEN",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TRUMP",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentLeader",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "electionEnded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endElection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "resultsSubmitted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "seats",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "votesBiden",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votesTrump",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "stateSeats",
            type: "uint8",
          },
        ],
        internalType: "struct USElection.StateResult",
        name: "result",
        type: "tuple",
      },
    ],
    name: "submitStateResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61094a8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101405780638da5cb5b14610148578063ac4bd53a14610163578063c94ca9e31461016b578063e494a8831461017f578063f2fde38b1461019257600080fd5b80632d78d8e5146100ae57806337ad98ec146100cd57806359f784681461010b57806369b36bd414610115578063713d87c51461011d575b600080fd5b6100b6600281565b60405160ff90911681526020015b60405180910390f35b6100fb6100db366004610707565b805160208183018101805160028252928201919093012091525460ff1681565b60405190151581526020016100c4565b6101136101a5565b005b6100b6600181565b6100b661012b3660046107b8565b60016020526000908152604090205460ff1681565b610113610257565b6000546040516001600160a01b0390911681526020016100c4565b6100b661026b565b6000546100fb90600160a01b900460ff1681565b61011361018d3660046107e2565b610335565b6101136101a036600461081d565b6105ce565b600054600160a01b900460ff16156102045760405162461bcd60e51b815260206004820152601e60248201527f54686520656c656374696f6e2068617320656e64656420616c7265616479000060448201526064015b60405180910390fd5b6000805460ff60a01b1916600160a01b1790557faacb23683ec1a0e9b52f9a6264edf58ad322ac62079d65ea7363a2d400f439f461024061026b565b60405160ff909116815260200160405180910390a1565b61025f610647565b61026960006106a1565b565b600160208190527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f5460009182527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5460ff918216911611156102ce5750600190565b60016020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5460026000527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f5460ff9182169116111561032f5750600290565b50600090565b600054600160a01b900460ff161561038f5760405162461bcd60e51b815260206004820152601e60248201527f54686520656c656374696f6e2068617320656e64656420616c7265616479000060448201526064016101fb565b60006103a160808301606084016107b8565b60ff16116103f15760405162461bcd60e51b815260206004820181905260248201527f537461746573206d7573742068617665206174206c656173742031207365617460448201526064016101fb565b80604001358160200135036104405760405162461bcd60e51b815260206004820152601560248201527454686572652063616e6e6f7420626520612074696560581b60448201526064016101fb565b600261044c8280610846565b60405161045a929190610894565b9081526040519081900360200190205460ff16156104cb5760405162461bcd60e51b815260206004820152602860248201527f5468697320737461746520726573756c742077617320616c7265616479207375604482015267626d69747465642160c01b60648201526084016101fb565b60008160400135826020013511156104e5575060016104e9565b5060025b6104f960808301606084016107b8565b60ff80831660009081526001602052604081208054909261051c918591166108a4565b92506101000a81548160ff021916908360ff160217905550600160028380600001906105489190610846565b604051610556929190610894565b908152604051908190036020019020805491151560ff199092169190911790557fa2e71fe38f1afa3762cf9d2ea7bb6a4d272a90fd6f9392f3acedd3b542046b46816105a860808501606086016107b8565b6105b28580610846565b6040516105c294939291906108d1565b60405180910390a15050565b6105d6610647565b6001600160a01b03811661063b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101fb565b610644816106a1565b50565b6000546001600160a01b031633146102695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561071957600080fd5b813567ffffffffffffffff8082111561073157600080fd5b818401915084601f83011261074557600080fd5b813581811115610757576107576106f1565b604051601f8201601f19908116603f0116810190838211818310171561077f5761077f6106f1565b8160405282815287602084870101111561079857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156107ca57600080fd5b813560ff811681146107db57600080fd5b9392505050565b6000602082840312156107f457600080fd5b813567ffffffffffffffff81111561080b57600080fd5b8201608081850312156107db57600080fd5b60006020828403121561082f57600080fd5b81356001600160a01b03811681146107db57600080fd5b6000808335601e1984360301811261085d57600080fd5b83018035915067ffffffffffffffff82111561087857600080fd5b60200191503681900382131561088d57600080fd5b9250929050565b8183823760009101908152919050565b60ff81811683821601908111156108cb57634e487b7160e01b600052601160045260246000fd5b92915050565b60ff8516815260ff8416602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f19160101939250505056fea2646970667358221220869aec5bedf212da1ec015fcc852078bc3f89c0c909b389fb2fb16355d28ff9f64736f6c63430008110033";

type USElectionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USElectionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USElection__factory extends ContractFactory {
  constructor(...args: USElectionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<USElection> {
    return super.deploy(overrides || {}) as Promise<USElection>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): USElection {
    return super.attach(address) as USElection;
  }
  connect(signer: Signer): USElection__factory {
    return super.connect(signer) as USElection__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USElectionInterface {
    return new utils.Interface(_abi) as USElectionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USElection {
    return new Contract(address, _abi, signerOrProvider) as USElection;
  }
}
